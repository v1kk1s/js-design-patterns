@import url(https://fonts.googleapis.com/css?family=Roboto:400,300,500,700);
@font-face {
  font-family: "hlvtc-medium";
  font-style: normal;
  font-weight: normal;
  src: url(" /public/fonts/HelveticaNeueCyrLight.eot?#iefix") format("embedded-opentype"), url(" /public/fonts/HelveticaNeueCyrLight.woff2") format("woff2"), url(" /public/fonts/HelveticaNeueCyrLight.woff") format("woff"), url(" /public/fonts/HelveticaNeueCyrLight.ttf") format("truetype"), url(" /public/fonts/HelveticaNeueCyrLight.svg#hlvtc-medium") format("svg"); }

@font-face {
  font-family: "hlvtc-bold";
  font-style: normal;
  font-weight: normal;
  src: url(" /public/fonts/HelveticaNeueCyrBold.eot?#iefix") format("embedded-opentype"), url(" /public/fonts/HelveticaNeueCyrBold.woff2") format("woff2"), url(" /public/fonts/HelveticaNeueCyrBold.woff") format("woff"), url(" /public/fonts/HelveticaNeueCyrBold.ttf") format("truetype"), url(" /public/fonts/HelveticaNeueCyrBold.svg#hlvtc-bold") format("svg"); }

body {
  font-family: "Roboto", sans-serif;
  position: relative; }

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; }

a {
  text-decoration: none; }

a:focus, input:focus {
  outline: none; }

.vert-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
  display: block; }

.app {
  min-width: 400px; }

.list-page {
  min-height: 100vh;
  width: 100%;
  padding-top: 120px; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/


.fact {
  padding: 40px;
  min-height: 100vh;
  background-color: #d9ffd9; }
  .fact-field {
    position: relative;
    height: 61vw;
    width: 90vw;
    background-color: green;
    border: 3px solid yellow; }
  .fact-center {
    height: 61vw;
    width: 3px;
    background-color: yellow;
    margin: auto;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0; }
    .fact-center:before {
      display: block;
      content: '';
      border-radius: 50%;
      position: absolute;
      top: 0;
      right: -8.5vw;
      bottom: 0;
      margin: auto;
      height: 17vw;
      width: 17vw;
      border: 3px solid yellow; }
  .fact-gate {
    width: 14vw;
    height: 38.3vw;
    background-color: green;
    position: absolute;
    top: 0;
    bottom: 0;
    margin: auto 0;
    border: 3px solid yellow;
    z-index: 2; }
    .fact-gate:before {
      height: 23vh;
      width: 7vh;
      border: 3px solid yellow;
      content: '';
      display: block;
      position: absolute;
      top: 0;
      bottom: 0;
      margin: auto 0; }
    .fact-gate.left {
      left: 0;
      margin-left: -3px; }
      .fact-gate.left:before {
        left: 0;
        margin-left: -3px; }
    .fact-gate.right {
      right: 0;
      margin-right: -3px; }
      .fact-gate.right:before {
        right: 0;
        margin-right: -3px; }
  .fact-circle {
    display: block;
    border-radius: 50%;
    position: absolute;
    top: 0;
    bottom: 0;
    margin: auto;
    height: 17vw;
    width: 17vw;
    border: 3px solid yellow;
    z-index: 1; }
    .fact-circle.left-c {
      left: 1.5vw; }
    .fact-circle.right-c {
      right: 1.5vw; }

/*# sourceMappingURL=data:application/json;base64, */