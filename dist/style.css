@import url(https://fonts.googleapis.com/css?family=Roboto:400,300,500,700);
@font-face {
  font-family: "hlvtc-medium";
  font-style: normal;
  font-weight: normal;
  src: url(" /public/fonts/HelveticaNeueCyrLight.eot?#iefix") format("embedded-opentype"), url(" /public/fonts/HelveticaNeueCyrLight.woff2") format("woff2"), url(" /public/fonts/HelveticaNeueCyrLight.woff") format("woff"), url(" /public/fonts/HelveticaNeueCyrLight.ttf") format("truetype"), url(" /public/fonts/HelveticaNeueCyrLight.svg#hlvtc-medium") format("svg"); }

@font-face {
  font-family: "hlvtc-bold";
  font-style: normal;
  font-weight: normal;
  src: url(" /public/fonts/HelveticaNeueCyrBold.eot?#iefix") format("embedded-opentype"), url(" /public/fonts/HelveticaNeueCyrBold.woff2") format("woff2"), url(" /public/fonts/HelveticaNeueCyrBold.woff") format("woff"), url(" /public/fonts/HelveticaNeueCyrBold.ttf") format("truetype"), url(" /public/fonts/HelveticaNeueCyrBold.svg#hlvtc-bold") format("svg"); }

body {
  font-family: "Roboto", sans-serif;
  position: relative; }

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; }

a {
  text-decoration: none; }

a:focus, input:focus {
  outline: none; }

.vert-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
  display: block; }

.app {
  min-width: 400px; }

.list-page {
  min-height: 100vh;
  width: 100%;
  padding-top: 120px; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/


.recent {
  overflow: hidden; }
  .recent-contact-entry-wrap {
    position: relative;
    -webkit-transition: -webkit-transform, opacity;
    -moz-transition: -moz-transform, opacity;
    transition: transform, opacity; }
  .recent-contact {
    border-bottom: 1px solid #dadada;
    padding: 40px 5.5%;
    -webkit-box-align: center;
    -moz-box-align: center;
    box-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    -ms-align-items: center;
    -o-align-items: center;
    align-items: center;
    -ms-flex-align: center;
    -webkit-align-content: stretch;
    -moz-align-content: stretch;
    align-content: stretch;
    -ms-flex-line-pack: stretch;
    display: -webkit-box;
    display: -moz-box;
    display: box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -moz-box-orient: horizontal;
    box-orient: horizontal;
    -webkit-box-direction: normal;
    -moz-box-direction: normal;
    box-direction: normal;
    -webkit-flex-direction: row;
    -moz-flex-direction: row;
    flex-direction: row;
    -ms-flex-direction: row;
    -webkit-box-pack: start;
    -moz-box-pack: start;
    box-pack: start;
    -webkit-justify-content: flex-start;
    -moz-justify-content: flex-start;
    -ms-justify-content: flex-start;
    -o-justify-content: flex-start;
    justify-content: flex-start;
    -ms-flex-pack: start;
    -webkit-box-lines: single;
    -moz-box-lines: single;
    box-lines: single;
    -webkit-flex-wrap: nowrap;
    -moz-flex-wrap: nowrap;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap; }
    .recent-contact-caption {
      margin-top: 7px;
      -webkit-transform: translateX(10%);
      -moz-transform: translateX(10%);
      -ms-transform: translateX(10%);
      -o-transform: translateX(10%);
      transform: translateX(10%);
      -webkit-transition: -webkit-transform;
      -moz-transition: -moz-transform;
      transition: transform; }
    .recent-contact-logo {
      -webkit-transition: opacity 0.2s cubic-bezier(0.455, 0.03, 0.515, 0.955);
      -moz-transition: opacity 0.2s cubic-bezier(0.455, 0.03, 0.515, 0.955);
      transition: opacity 0.2s cubic-bezier(0.455, 0.03, 0.515, 0.955);
      height: 100px;
      width: 100px; }
    .recent-contact-name {
      color: rgba(16, 16, 16, 0.9);
      font-size: 33px;
      font-family: "hlvtc-bold", Helvetica, Arial, sans-serif;
      letter-spacing: -0.4px;
      margin-bottom: 11px; }
    .recent-contact-last-seen {
      color: #c0c0c0;
      font-size: 21px;
      font-family: "hlvtc-medium", Helvetica, Arial, sans-serif;
      letter-spacing: 0.7px; }
  .recent-delete-contact {
    width: 197px;
    height: 180px;
    position: absolute;
    right: -214px;
    top: 0;
    background: #c62828;
    -webkit-box-align: center;
    -moz-box-align: center;
    box-align: center;
    -webkit-align-items: center;
    -moz-align-items: center;
    -ms-align-items: center;
    -o-align-items: center;
    align-items: center;
    -ms-flex-align: center;
    -webkit-align-content: center;
    -moz-align-content: center;
    align-content: center;
    -ms-flex-line-pack: center;
    display: -webkit-box;
    display: -moz-box;
    display: box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    box-orient: vertical;
    -webkit-box-direction: normal;
    -moz-box-direction: normal;
    box-direction: normal;
    -webkit-flex-direction: column;
    -moz-flex-direction: column;
    flex-direction: column;
    -ms-flex-direction: column;
    -webkit-box-pack: center;
    -moz-box-pack: center;
    box-pack: center;
    -webkit-justify-content: center;
    -moz-justify-content: center;
    -ms-justify-content: center;
    -o-justify-content: center;
    justify-content: center;
    -ms-flex-pack: center;
    -webkit-box-lines: single;
    -moz-box-lines: single;
    box-lines: single;
    -webkit-flex-wrap: nowrap;
    -moz-flex-wrap: nowrap;
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
    -webkit-transition: right 0.3s cubic-bezier(0.455, 0.03, 0.515, 0.955);
    -moz-transition: right 0.3s cubic-bezier(0.455, 0.03, 0.515, 0.955);
    transition: right 0.3s cubic-bezier(0.455, 0.03, 0.515, 0.955); }
    .recent-delete-contact-icon {
      height: 65px;
      width: 64px;
      background: url("../public/img/delete-contact-icon.png") no-repeat;
      background-position: center center; }
    .recent-delete-contact-text {
      color: white;
      font-size: 22px;
      margin-top: 20px;
      font-family: "hlvtc-medium", Helvetica, Arial, sans-serif;
      letter-spacing: 1px; }
  .recent .delete .recent-contact-logo {
    opacity: 0; }
  .recent .delete .recent-contact-caption {
    -webkit-transform: translateX(-100px);
    -moz-transform: translateX(-100px);
    -ms-transform: translateX(-100px);
    -o-transform: translateX(-100px);
    transform: translateX(-100px); }
  .recent .delete .recent-delete-contact {
    right: 0; }
  .recent .deleted {
    -webkit-transform: translateY(-181px);
    -moz-transform: translateY(-181px);
    -ms-transform: translateY(-181px);
    -o-transform: translateY(-181px);
    transform: translateY(-181px);
    opacity: 0;
    z-index: -1;
    display: none; }

/*# sourceMappingURL=data:application/json;base64, */